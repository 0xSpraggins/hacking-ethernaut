/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { CoinFlip, CoinFlipInterface } from "../../ethernaut/CoinFlip";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "consecutiveWins",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_guess",
        type: "bool",
      },
    ],
    name: "flip",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040527f800000000000000000000000000000000000000000000000000000000000000060025534801561003457600080fd5b50600080819055506103e08061004b6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631d263f671461003b578063e6f334d71461006b575b600080fd5b61005560048036038101906100509190610197565b610089565b60405161006291906101d3565b60405180910390f35b610073610154565b6040516100809190610207565b60405180910390f35b6000806001436100999190610251565b4060001c905080600154036100e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100da906102e2565b60405180910390fd5b806001819055506000600254826100fa9190610331565b905060006001821461010d576000610110565b60015b9050841515811515036101405760008081548092919061012f90610362565b91905055506001935050505061014f565b60008081905550600093505050505b919050565b60005481565b600080fd5b60008115159050919050565b6101748161015f565b811461017f57600080fd5b50565b6000813590506101918161016b565b92915050565b6000602082840312156101ad576101ac61015a565b5b60006101bb84828501610182565b91505092915050565b6101cd8161015f565b82525050565b60006020820190506101e860008301846101c4565b92915050565b6000819050919050565b610201816101ee565b82525050565b600060208201905061021c60008301846101f8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061025c826101ee565b9150610267836101ee565b925082820390508181111561027f5761027e610222565b5b92915050565b600082825260208201905092915050565b7f426c6f636b68617368204572726f720000000000000000000000000000000000600082015250565b60006102cc600f83610285565b91506102d782610296565b602082019050919050565b600060208201905081810360008301526102fb816102bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061033c826101ee565b9150610347836101ee565b92508261035757610356610302565b5b828204905092915050565b600061036d826101ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361039f5761039e610222565b5b60018201905091905056fea2646970667358221220474f3fc96f87d03ae9d3c6c4e972b16a484da37616948012aacb8ffd69918fde64736f6c63430008110033";

type CoinFlipConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoinFlipConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoinFlip__factory extends ContractFactory {
  constructor(...args: CoinFlipConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CoinFlip> {
    return super.deploy(overrides || {}) as Promise<CoinFlip>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoinFlip {
    return super.attach(address) as CoinFlip;
  }
  override connect(signer: Signer): CoinFlip__factory {
    return super.connect(signer) as CoinFlip__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoinFlipInterface {
    return new utils.Interface(_abi) as CoinFlipInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoinFlip {
    return new Contract(address, _abi, signerOrProvider) as CoinFlip;
  }
}
